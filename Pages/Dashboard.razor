@page "/"
@using SyncfusionLabelPosition = Syncfusion.Blazor.Charts.LabelPosition;

<div class="m-3">

    <div class="control-section">
        <SfDashboardLayout CellSpacing="@(new double[]{15 ,15 })" CellAspectRatio="0.8" Columns="8">
            <DashboardLayoutPanels>
                <DashboardLayoutEvents Changed="@(() => {
                                                         })"  Created="LayoutCreated"></DashboardLayoutEvents>
                <DashboardLayoutPanel  Column="@chart1Column" Row="@chart1Row" SizeX="5" SizeY="2">
                    <HeaderTemplate>
                        <span class="title">Sales - Yearly Performance</span>
                    </HeaderTemplate>
                    <ContentTemplate>
                        @if (isLayoutRender)
                        {
                            <SfChart @ref="chart1" Theme="@theme">
                                <ChartArea>
                                    <ChartAreaBorder Width="0"></ChartAreaBorder>
                                </ChartArea>
                                <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Category">
                                    <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
                                    <ChartAxisLabelStyle Size="11px"></ChartAxisLabelStyle>
                                </ChartPrimaryXAxis>
                                <ChartPrimaryYAxis Minimum="0" Maximum="100" Interval="20" LabelFormat="{value}%">
                                    <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
                                    <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
                                    <ChartAxisLabelStyle Size="11px"></ChartAxisLabelStyle>
                                    <ChartAxisTitleStyle Size="13px"></ChartAxisTitleStyle>
                                </ChartPrimaryYAxis>
                                <ChartSeriesCollection>
                                    <ChartSeries DataSource="@ColumnChartDataCollection" Name="Online" Fill="#2485FA" XName="Period" YName="Percentage" Type="ChartSeriesType.Column">
                                        <ChartMarker>
                                            <ChartDataLabel Visible="true" Position="SyncfusionLabelPosition.Middle" Name="TextMapping">
                                                <ChartDataLabelFont Color="#FFFFFF"></ChartDataLabelFont>
                                            </ChartDataLabel>
                                        </ChartMarker>
                                    </ChartSeries>
                                    <ChartSeries DataSource="@ColumnChartData" Fill="#FEC200" Name="Retail" XName="Period" YName="Percentage" Type="ChartSeriesType.Column">
                                        <ChartMarker>
                                            <ChartDataLabel Visible="true" Position="SyncfusionLabelPosition.Middle" Name="TextMapping">
                                                <ChartDataLabelFont Color="#FFFFFF"></ChartDataLabelFont>
                                            </ChartDataLabel>
                                        </ChartMarker>
                                    </ChartSeries>
                                </ChartSeriesCollection>
                            </SfChart>
                        }
                    </ContentTemplate>
                </DashboardLayoutPanel>
                <DashboardLayoutPanel Column="@chart2Column" Row="@chart2Row" SizeX="3" SizeY="2">
                    <HeaderTemplate>
                        <span class="title">Product Wise Sales - 2021</span>
                    </HeaderTemplate>
                    <ContentTemplate>
                        @if (isLayoutRender)
                        {
                            <SfAccumulationChart EnableAnimation="true" Theme="@theme" EnableBorderOnMouseMove="false" EnableSmartLabels="true">
                                <AccumulationChartBorder Color="transparent"></AccumulationChartBorder>
                                <AccumulationChartTooltipSettings Enable="true" Format="${point.x}"></AccumulationChartTooltipSettings>
                                <AccumulationChartSeriesCollection>
                                    <AccumulationChartSeries DataSource="@PieChartDataCollection" XName="Product" YName="Percentage" Radius="70%" InnerRadius="50%" Palettes="@palettes">
                                        <AccumulationChartSeriesBorder Color="@Color" Width="1"></AccumulationChartSeriesBorder>
                                        <AccumulationDataLabelSettings Visible="true" Name="TextMapping" Position="AccumulationLabelPosition.Outside">
                                            <AccumulationChartConnector Length="10px" Type="ConnectorType.Curve"></AccumulationChartConnector>
                                        </AccumulationDataLabelSettings>
                                    </AccumulationChartSeries>
                                </AccumulationChartSeriesCollection>
                                <AccumulationChartLegendSettings Visible="false"></AccumulationChartLegendSettings>
                            </SfAccumulationChart>
                        }
                    </ContentTemplate>
                </DashboardLayoutPanel>
            </DashboardLayoutPanels>
        </SfDashboardLayout>
    </div>
</div>


@code {
    
    private int chart1Column = 3;
    private int chart1Row = 0;
    
    private int chart2Column = 0;
    private int chart2Row = 0;
    
    private bool isLayoutRender;
    string BorderColor = "#2485FA";                
    string BorderColor2 = "#FEC200";
    string FillColor2;
    string FillColor;
    string Color;
    string HeaderColor;
    string TitleColor;
    string CurrentUri;
    string valueUrl = "url";
    private Theme theme;
    private static Timer timer;
    SfChart chart1;
    SfChart chart2;
    private string[] palettes = new string[] { "#61EFCD", "#CDDE1F", "#c4c4c4", "#CA765A", "#2485FA", "#F57D7D", "#C152D2",
    "#8854D9", "#3D4EB8", "#00BCD7","#4472c4", "#ed7d31", "#ffc000", "#70ad47", "#5b9bd5", "#c1c1c1", "#6f6fe2", "#e269ae", "#9e480e", "#997300" };
    public List<ChartData> ChartDataCollection { get; set; } = new List<ChartData>
    {
        new ChartData { Period = "Jan", Percentage = 3600 },
        new ChartData { Period = "Feb", Percentage = 6200 },
        new ChartData { Period = "Mar", Percentage = 8100 },
        new ChartData { Period = "Apr", Percentage = 5900 },
        new ChartData { Period = "May", Percentage = 8900 },
        new ChartData { Period = "Jun", Percentage = 7200 },
        new ChartData { Period = "Jul", Percentage = 4300 },
        new ChartData { Period = "Aug", Percentage = 4600 },
        new ChartData { Period = "Sep", Percentage = 5500 },
        new ChartData { Period = "Oct", Percentage = 6350 },
        new ChartData { Period = "Nov", Percentage = 5700 },
        new ChartData { Period = "Dec", Percentage = 8000 }
    };
    public List<ChartData> ChartDataCollection1 { get; set; } = new List<ChartData>
    {
        new ChartData { Period = "Jan", Percentage = 6400,},
        new ChartData { Period = "Feb", Percentage = 5300 },
        new ChartData { Period = "Mar", Percentage = 4900 },
        new ChartData { Period = "Apr", Percentage = 5300 },
        new ChartData { Period = "May", Percentage = 4200 },
        new ChartData { Period = "Jun", Percentage = 6500 },
        new ChartData { Period = "Jul", Percentage = 7900 },
        new ChartData { Period = "Aug", Percentage = 3800 },
        new ChartData { Period = "Sep", Percentage = 6800 },
        new ChartData { Period = "Oct", Percentage = 3400 },
        new ChartData { Period = "Nov", Percentage = 6400 },
        new ChartData { Period = "Dec", Percentage = 6800 }
    };
    public List<ChartData> PieChartDataCollection { get; set; } = new List<ChartData>
    {
        new ChartData { Product = "TV : 30 (12%)", Percentage = 12, TextMapping = "TV, 30 <br/>12%"},
        new ChartData { Product = "PC : 20 (8%)", Percentage = 8, TextMapping = "PC, 20 <br/>8%"},
        new ChartData { Product = "Laptop : 40 (16%)",  Percentage = 16, TextMapping = "Laptop, 40 <br/>16%"},
        new ChartData { Product = "Mobile : 90 (36%)", Percentage = 36, TextMapping = "Mobile, 90 <br/>36%"},
        new ChartData { Product = "Camera : 27 (11%)", Percentage = 11, TextMapping = "Camera, 27 <br/>11%"}
    };
    public List<ChartData> ColumnChartDataCollection { get; set; } = new List<ChartData>
    {
        new ChartData { Period = "2017", Percentage = 60, TextMapping = "60%" },
        new ChartData { Period = "2018", Percentage = 56, TextMapping = "56%"},
        new ChartData { Period = "2019", Percentage = 71, TextMapping = "71%" },
        new ChartData { Period = "2020", Percentage = 85, TextMapping = "85%" },
        new ChartData { Period = "2021", Percentage = 73, TextMapping = "73%" },
    };
    public List<ChartData> ColumnChartData { get; set; } = new List<ChartData>
    {
        new ChartData { Period = "2017", Percentage = 40, TextMapping = "40%" },
        new ChartData { Period = "2018", Percentage = 44, TextMapping = "44%"},
        new ChartData { Period = "2019", Percentage = 29, TextMapping = "29%" },
        new ChartData { Period = "2020", Percentage = 15, TextMapping = "15%" },
        new ChartData { Period = "2021", Percentage = 27, TextMapping = "27%" },
    };
    protected override void OnInitialized()
    {
        theme = Theme.Bootstrap5;
        // CurrentUri = NavigationManager.Uri;
        FillColor = String.Concat(valueUrl, "(#gradient-chart)");
        FillColor2 = String.Concat(valueUrl, "(#gradient-chart1)");   
      
        TitleColor = "#F3F2F1";
        Color = "#fff";
        HeaderColor = "#1A1A1A";
            
        //     if (CurrentUri.IndexOf("material") > -1)
        //     {
        //         Color = "#303030";
        //         HeaderColor = "#303030";
        //     }
        //     else if(CurrentUri.IndexOf("bootstrap5") > -1)
        //     {
        //         Color = "#212529";
        //         HeaderColor = "#212529";
        //     }
        //     else if(CurrentUri.IndexOf("bootstrap") > -1)
        //     {
        //         Color = "#1A1A1A";
        //         HeaderColor = "#1A1A1A";
        //     }
        //     else if(CurrentUri.IndexOf("tailwind") > -1)
        //     {
        //         Color = "#1F2937";
        //         HeaderColor = "#1F2937";
        //     }
        //     else
        //     {
        //         Color = "#222222";
        //         HeaderColor = "#222222";
        //     }
        // }
        // else if(CurrentUri.IndexOf("highcontrast") > -1)
        // {
        //     Color = "#000000";
        //     HeaderColor = "#000000";
        //     TitleColor = "#F3F2F1";
        // }
        // else
        // {
        //     Color = "#FFFFFF";
        //     HeaderColor = "#FAFAFA";
        //     TitleColor = "#737373";
        
        DataLoaded();
    }
    public void DataLoaded()
    {
        foreach(ChartData chartData in ChartDataCollection)
        {
            chartData.PointColor = FillColor;
        }
        foreach(ChartData chartData1 in ChartDataCollection1)
        {
            chartData1.PointColor = FillColor2;
        }
    }
    public void LayoutCreated()
    {
        isLayoutRender = true;
        timer = new Timer(1000);
        timer.Elapsed += RefreshCharts;
        timer.AutoReset = true;
        timer.Enabled = true;
    }
    private void RefreshCharts(Object source, ElapsedEventArgs e)
    {
        if (chart1 == null && chart2 == null)
            return;
        chart1.RefreshAsync(false);
        chart2.RefreshAsync(false);
        timer.Enabled = false;
        timer.AutoReset = false;
    }
    public class ChartData
    {
        public string Period { get; set; }
        public string Product { get; set; }
        public double Percentage { get; set; }
        public string TextMapping { get; set; }
        public string AnnotationX { get; set; }
        public string AnnotationY { get; set; }
        public string PointColor { get; set; }
    }
}